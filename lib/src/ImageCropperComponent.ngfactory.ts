/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '../../src/ImageCropperComponent';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view_utils';
import * as import3 from '@angular/core/src/linker/view';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/linker/element';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '@angular/core/src/linker/element_ref';
export class Wrapper_ImageCropperComponent {
  context:import0.ImageCropperComponent;
  changed:boolean;
  changes:{[key: string]:any};
  /*private*/ _image:any;
  /*private*/ _gridAlpha:any;
  /*private*/ _showGrid:any;
  constructor() {
    this.changed = false;
    this.changes = {};
    this._image = import1.UNINITIALIZED;
    this._gridAlpha = import1.UNINITIALIZED;
    this._showGrid = import1.UNINITIALIZED;
    this.context = new import0.ImageCropperComponent();
  }
  check_image(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._image,currValue))) {
      this.changed = true;
      this.context.image = currValue;
      this.changes['image'] = new import1.SimpleChange(this._image,currValue);
      this._image = currValue;
    }
  }
  check_gridAlpha(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._gridAlpha,currValue))) {
      this.changed = true;
      this.context.gridAlpha = currValue;
      this.changes['gridAlpha'] = new import1.SimpleChange(this._gridAlpha,currValue);
      this._gridAlpha = currValue;
    }
  }
  check_showGrid(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import2.checkBinding(throwOnChange,this._showGrid,currValue))) {
      this.changed = true;
      this.context.showGrid = currValue;
      this.changes['showGrid'] = new import1.SimpleChange(this._showGrid,currValue);
      this._showGrid = currValue;
    }
  }
  detectChangesInternal(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this.changed;
    this.changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this.changes);
      this.changes = {};
    } }
    return changed;
  }
}
var renderType_ImageCropperComponent_Host:import4.RenderComponentType = (null as any);
class _View_ImageCropperComponent_Host0 extends import3.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import5.AppElement;
  _ImageCropperComponent_0_4:Wrapper_ImageCropperComponent;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_ImageCropperComponent_Host0,renderType_ImageCropperComponent_Host,import7.ViewType.HOST,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    this._el_0 = this.selectOrCreateHostElement('image-cropper',rootSelector,(null as any));
    this._appEl_0 = new import5.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ImageCropperComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ImageCropperComponent_0_4 = new Wrapper_ImageCropperComponent();
    this._appEl_0.initComponent(this._ImageCropperComponent_0_4.context,([] as any[]),compView_0);
    compView_0.create(this._ImageCropperComponent_0_4.context,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.ImageCropperComponent) && (0 === requestNodeIndex))) { return this._ImageCropperComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._ImageCropperComponent_0_4.detectChangesInternal(this,this._el_0,throwOnChange);
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ImageCropperComponent_0_4.context.ngAfterViewInit(); } }
  }
}
function viewFactory_ImageCropperComponent_Host0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<any> {
  if ((renderType_ImageCropperComponent_Host === (null as any))) { (renderType_ImageCropperComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_ImageCropperComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const ImageCropperComponentNgFactory:import9.ComponentFactory<import0.ImageCropperComponent> = new import9.ComponentFactory<import0.ImageCropperComponent>('image-cropper',viewFactory_ImageCropperComponent_Host0,import0.ImageCropperComponent);
const styles_ImageCropperComponent:any[] = ['h1[_ngcontent-%COMP%] {\n            color: blue;\n        }'];
var renderType_ImageCropperComponent:import4.RenderComponentType = (null as any);
class _View_ImageCropperComponent0 extends import3.AppView<import0.ImageCropperComponent> {
  _viewQuery_cropCanvas_0:import10.QueryList<any>;
  _el_0:any;
  constructor(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement) {
    super(_View_ImageCropperComponent0,renderType_ImageCropperComponent,import7.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import1.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import5.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._viewQuery_cropCanvas_0 = new import10.QueryList<any>();
    this._el_0 = this.renderer.createElement(parentRenderNode,'canvas',(null as any));
    this.renderer.setElementAttribute(this._el_0,'style','background: transparent;');
    var disposable_0:Function = this.renderer.listen(this._el_0,'panend',this.eventHandler(this._handle_panend_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'panmove',this.eventHandler(this._handle_panmove_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'pinchmove',this.eventHandler(this._handle_pinchmove_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'pinchend',this.eventHandler(this._handle_pinchend_0_3.bind(this)));
    this._viewQuery_cropCanvas_0.reset([new import11.ElementRef(this._el_0)]);
    this.context.canvas = this._viewQuery_cropCanvas_0.first;
    this.init(([] as any[]),[this._el_0],[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    ,([] as any[]));
    return (null as any);
  }
  private _handle_panend_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onPanEnd($event)) !== false);
    return (true && pd_0);
  }
  private _handle_panmove_0_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onPan($event)) !== false);
    return (true && pd_0);
  }
  private _handle_pinchmove_0_2($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onPinch($event)) !== false);
    return (true && pd_0);
  }
  private _handle_pinchend_0_3($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.context.onPinchEnd($event)) !== false);
    return (true && pd_0);
  }
}
export function viewFactory_ImageCropperComponent0(viewUtils:import2.ViewUtils,parentInjector:import6.Injector,declarationEl:import5.AppElement):import3.AppView<import0.ImageCropperComponent> {
  if ((renderType_ImageCropperComponent === (null as any))) { (renderType_ImageCropperComponent = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.Emulated,styles_ImageCropperComponent,{})); }
  return new _View_ImageCropperComponent0(viewUtils,parentInjector,declarationEl);
}